---
import Layout from '@/layouts/Layout.astro';
import Hero from '@/components/Hero.astro';
import Awards from '@/components/Awards.astro';
import Sponsors from '@/components/Sponsors.astro';
import Reservation from '@/components/Reservation.astro';
import NumberButtons from '@/components/NumberButtons.astro';
import Modal from '@/components/Modal.astro';
---

<Layout>
	<Hero />
	<Awards />
	<Sponsors />
	<Reservation />
	<NumberButtons />
	<Modal />
</Layout>
<!-- Toast message -->
<div class='fixed top-4 right-4 z-50'>
	<div
		id='message'
		class='hidden fixed top-4 right-4 z-50 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg transform transition-all duration-300'
	>
	</div>
</div>

<script is:inline>
	// Variables globales
	let selectedNumber = null;

	const modal = document.getElementById('reservationModal');
	const selectedNumberSpan = document.getElementById('selectedNumber');
	const reservationForm = document.getElementById('reservationForm');
	const messageDiv = document.getElementById('message');
	modal.classList.add('hidden');
	// Cargar números reservados al iniciar
	document?.addEventListener('DOMContentLoaded', async () => {
		try {
			const response = await fetch('/api/tomados');
			const data = await response.json();
			updateButtonStates(data);
		} catch (error) {
			console.error('Error al cargar números reservados:', error);
			showMessage('Error al cargar los números reservados', 'error');
		}
	});

	// Mostrar mensajes al usuario
	function showMessage(message, type = 'success') {
		messageDiv.textContent = message;
		messageDiv.classList.remove('hidden');

		// Ajustar el estilo según el tipo de mensaje
		if (type === 'error') {
			messageDiv.classList.remove('bg-green-500');
			messageDiv.classList.add('bg-red-500');
		} else {
			messageDiv.classList.remove('bg-red-500');
			messageDiv.classList.add('bg-green-500');
		}

		// Animación de entrada
		messageDiv.style.transform = 'translateY(-100%)';
		requestAnimationFrame(() => {
			messageDiv.style.transform = 'translateY(0)';
		});

		// Ocultar después de 3 segundos
		setTimeout(() => {
			messageDiv.style.transform = 'translateY(-100%)';
			requestAnimationFrame(() => {
				messageDiv.classList.add('hidden');
				messageDiv.style.transform = '';
			});
		}, 3000);
	}

	// Actualizar el estado de los botones según los números reservados
	function updateButtonStates(takenNumbers) {
		Object.keys(takenNumbers).forEach((number) => {
			const button = document.querySelector(`button[data-number="${number}"]`);
			if (button) {
				button.disabled = true;
				button.classList.add('line-through');
			}
		});
	}

	// Inicialización de eventos
	function initModal() {
		// Mostrar modal al hacer clic en un número
		document.querySelectorAll('button[data-number]').forEach((button) => {
			button?.addEventListener('click', handleNumberClick);
		});

		// Cerrar modal con la X o el botón Cancelar
		document.querySelectorAll('.close-modal').forEach((btn) => {
			btn?.addEventListener('click', closeModal);
		});

		// Cerrar al hacer clic fuera del contenido
		modal.addEventListener('click', closeModal);

		// Cerrar con Escape
		document?.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
				closeModal();
			}
		});
	}

	// Manejar clic en un botón de número
	function handleNumberClick(event) {
		event.stopPropagation();
		const button = event.currentTarget;
		if (button.disabled) return;

		selectedNumber = button.dataset.number;
		selectedNumberSpan.textContent = selectedNumber;

		modal.classList.remove('hidden');
		document.body.style.overflow = 'hidden'; // Prevenir scroll del body
	}

	// Cerrar modal
	function closeModal() {
		modal.classList.add('hidden');
		document.body.style.overflow = ''; // Restaurar scroll del body
	}

	// Inicializar cuando el DOM esté listo
	if (document.readyState === 'loading') {
		document?.addEventListener('DOMContentLoaded', initModal);
	} else {
		initModal();
	}

	// Manejar envío del formulario
	reservationForm?.addEventListener('submit', async (e) => {
		e.preventDefault();

		const name = document.getElementById('name').value.trim();
		const phone = document.getElementById('phone').value.trim();

		// Validar que se haya seleccionado un número
		if (!selectedNumber) {
			showMessage('Por favor selecciona un número primero', 'error');
			return;
		}

		try {
			// Convertir el número a entero explícitamente
			const number = parseInt(selectedNumber, 10);

			// Mostrar indicador de carga
			showMessage('Procesando reserva...', 'info');

			const response = await fetch('/api/reservar', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					number,
					name,
					phone,
				}),
			});

			const result = await response.json();

			if (response.ok) {
				showMessage('¡Número reservado exitosamente!', 'success');
				// Deshabilitar el botón del número reservado
				const button = document.querySelector(`button[data-number="${selectedNumber}"]`);
				if (button) {
					button.disabled = true;
					button.classList.add('bg-gray-300', 'cursor-not-allowed', 'line-through');
				}
				// Cerrar el modal
				modal.classList.add('hidden');
				// Limpiar el formulario
				reservationForm.reset();
			} else {
				showMessage(result.error || 'Error al procesar la reserva', 'error');
			}
		} catch (error) {
			console.error('Error:', error);
			showMessage('Error de conexión. Por favor, intenta de nuevo.', 'error');
		}
	});
</script>
