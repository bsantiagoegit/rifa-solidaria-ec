---
import thirdSponsorImage from '@/assets/sponsor-arellano.webp';
import seventhSponsorImage from '@/assets/sponsor-arsenia.webp';
import fifthSponsorImage from '@/assets/sponsor-carbonero-occidental.webp';
import sixthSponsorImage from '@/assets/sponsor-carbonero-stalin.webp';
import fourthSponsorImage from '@/assets/sponsor-compucars.webp';
import eighthSponsorImage from '@/assets/sponsor-faisan.webp';
import secondSponsorImage from '@/assets/sponsor-jalil.webp';
import { Image } from 'astro:assets';
import { awards } from '../data/awards';

// Mapear premios con sus sponsors correspondientes
const sponsors = [
	null,
	secondSponsorImage,
	thirdSponsorImage,
	fourthSponsorImage,
	fifthSponsorImage,
	sixthSponsorImage,
	seventhSponsorImage,
	eighthSponsorImage,
	null,
];

const prizesWithSponsors = awards.map((award, index) => ({
	...award,
	sponsor: sponsors[index],
	hasImage: sponsors[index] !== null,
}));
---

<section class='w-full overflow-hidden relative py-3 rounded-lg'>
	<h2 class='text-2xl md:text-3xl lg:text-4xl font-bold text-center mb-0 md:mb-8 text-gray-800'>Premios a rifar</h2>

	<div class='carousel-container relative'>
		<div id='carousel-track' class='carousel-track flex transition-transform duration-500 ease-in-out'>
			{
				// Duplicamos los slides para efecto infinito
				[...prizesWithSponsors, ...prizesWithSponsors, ...prizesWithSponsors].map((prize, index) => (
					<div class='carousel-slide flex-shrink-0 w-full'>
						<div
							class={`flex flex-col md:flex-row items-center ${prize.hasImage ? 'justify-between' : 'justify-center'} max-w-4xl mx-auto px-6 py-4 gap-6 min-h-[200px]`}>
							{/* Imagen del Sponsor - Izquierda en desktop, arriba en mobile */}
							{prize.hasImage && (
								<div class='flex-shrink-0 order-1 md:order-1 w-32 h-32 md:w-40 md:h-40 flex items-center justify-center'>
									<Image
										src={prize.sponsor!}
										alt={`Sponsor ${prize.posicion}`}
										loading='lazy'
										decoding='async'
										class='object-contain w-full h-full'
									/>
								</div>
							)}

							{/* Información del Premio - Derecha en desktop, abajo en mobile */}
							<div class={`${prize.hasImage ? 'flex-1' : 'w-full'} text-center md:text-left order-2 md:order-2`}>
								<div
									class={`text-3xl md:text-4xl font-bold text-indigo-600 mb-0 md:mb-4 text-center md:${prize.hasImage ? 'text-left' : 'text-center'}`}>
									{prize.posicion}
								</div>
								<p class={`text-gray-700 text-xl md:text-2xl leading-relaxed ${prize.hasImage ? 'text-left' : 'text-center'}`}>{prize.descripcion}</p>
							</div>
						</div>
					</div>
				))
			}
		</div>

		{/* Indicadores de progreso */}
		<div class='flex justify-center mt-6 space-x-2'>
			{
				prizesWithSponsors.map((_, index) => (
					<button class='indicator w-3 h-3 rounded-full bg-gray-300 hover:bg-indigo-400 transition-colors duration-200' data-slide={index} />
				))
			}
		</div>
	</div>
</section>

<style>
	.carousel-track {
		transform: translateX(0);
	}

	.carousel-slide {
		min-width: 100%;
	}

	.indicator.active {
		background-color: rgb(79 70 229); /* indigo-600 */
	}

	@media (prefers-reduced-motion: reduce) {
		.carousel-track {
			transition: none;
		}
	}
</style>

<script is:inline>
	/**
	 * PrizeCarousel - Lógica del carousel de premios
	 * Maneja el autoplay, navegación, eventos y estados del carousel
	 */
	class PrizeCarousel {
		constructor() {
			this.track = document.getElementById('carousel-track');
			this.indicators = document.querySelectorAll('.indicator');
			this.slides = document.querySelectorAll('.carousel-slide');
			this.totalSlides = this.indicators.length; // Solo los slides originales
			this.currentSlide = 0;
			this.isPlaying = true;
			this.interval = null;
			this.autoplayDelay = 8000; // 8 segundos
			this.isMobile = window.innerWidth < 768;

			this.init();
		}

		init() {
			this.startAutoplay();
			this.setupEventListeners();
			this.updateIndicators();
		}

		startAutoplay() {
			if (this.interval) clearInterval(this.interval);

			this.interval = setInterval(() => {
				if (this.isPlaying) {
					this.nextSlide();
				}
			}, this.autoplayDelay);
		}

		stopAutoplay() {
			this.isPlaying = false;
		}

		resumeAutoplay() {
			this.isPlaying = true;
		}

		nextSlide() {
			this.currentSlide = (this.currentSlide + 1) % this.totalSlides;
			this.updateCarousel();
		}

		goToSlide(index) {
			this.currentSlide = index;
			this.updateCarousel();
		}

		updateCarousel() {
			// Usamos el segundo conjunto de slides para evitar el salto visual
			const actualIndex = this.currentSlide + this.totalSlides;
			const translateX = -(actualIndex * 100);

			this.track.style.transform = `translateX(${translateX}%)`;
			this.updateIndicators();

			// Si llegamos al final del tercer conjunto, reseteamos sin animación
			if (this.currentSlide === 0) {
				setTimeout(() => {
					this.track.style.transition = 'none';
					this.track.style.transform = `translateX(-${this.totalSlides * 100}%)`;
					setTimeout(() => {
						this.track.style.transition = 'transform 0.5s ease-in-out';
					}, 50);
				}, 500);
			}
		}

		updateIndicators() {
			this.indicators.forEach((indicator, index) => {
				indicator.classList.toggle('active', index === this.currentSlide);
			});
		}

		setupEventListeners() {
			// Eventos para hover en desktop
			if (!this.isMobile) {
				this.slides.forEach((slide) => {
					slide.addEventListener('mouseenter', () => this.stopAutoplay());
					slide.addEventListener('mouseleave', () => this.resumeAutoplay());
				});
			}

			// Eventos para click en mobile y desktop
			this.slides.forEach((slide) => {
				slide.addEventListener('click', () => {
					if (this.isMobile) {
						if (this.isPlaying) {
							this.stopAutoplay();
						} else {
							this.resumeAutoplay();
						}
					}
				});
			});

			// Eventos para indicadores
			this.indicators.forEach((indicator, index) => {
				indicator.addEventListener('click', () => {
					this.goToSlide(index);
				});
			});

			// Pausa al cambiar de pestaña
			document.addEventListener('visibilitychange', () => {
				if (document.hidden) {
					this.stopAutoplay();
				} else {
					this.resumeAutoplay();
				}
			});

			// Responsive behavior
			window.addEventListener('resize', () => {
				const wasMobile = this.isMobile;
				this.isMobile = window.innerWidth < 768;

				if (wasMobile !== this.isMobile) {
					this.setupEventListeners();
				}
			});
		}

		/**
		 * Destruye la instancia del carousel y limpia los event listeners
		 */
		destroy() {
			if (this.interval) {
				clearInterval(this.interval);
			}
		}
	}

	/**
	 * Inicializa el carousel cuando el DOM esté listo
	 */
	function initPrizeCarousel() {
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', () => {
				new PrizeCarousel();
			});
		} else {
			new PrizeCarousel();
		}
	}

	// Auto-inicializar
	initPrizeCarousel();
</script>
